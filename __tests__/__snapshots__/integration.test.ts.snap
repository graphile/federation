// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`federated service: federated schema 1`] = `
type Email implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  email: String!

  """Reads and enables pagination through a set of \`UsersEmail\`."""
  usersEmailsByEmailIdList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]!
}

"""
A condition to be used against \`Email\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EmailCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`email\` field."""
  email: String
}

"""Methods to use when ordering \`Email\`."""
enum EmailsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Forum implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!

  """Reads and enables pagination through a set of \`Post\`."""
  postsByForumIdList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Post\`."""
    orderBy: [PostsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): [Post!]!
}

"""
A condition to be used against \`Forum\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ForumCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`title\` field."""
  title: String
}

"""Methods to use when ordering \`Forum\`."""
enum ForumsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  forumId: Int!
  body: String!

  """Reads a single \`Forum\` that is related to this \`Post\`."""
  forumByForumId: Forum
}

"""
A condition to be used against \`Post\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`forumId\` field."""
  forumId: Int

  """Checks for equality with the object’s \`body\` field."""
  body: String
}

"""Methods to use when ordering \`Post\`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FORUM_ID_ASC
  FORUM_ID_DESC
  BODY_ASC
  BODY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Query {
  """Reads a set of \`Email\`."""
  allEmailsList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Email\`."""
    orderBy: [EmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailCondition
  ): [Email!]

  """Reads a set of \`User\`."""
  allUsersList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`User\`."""
    orderBy: [UsersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): [User!]

  """Reads a set of \`UsersEmail\`."""
  allUsersEmailsList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]
  emailById(id: Int!): Email
  userById(id: Int!): User
  usersEmailByUserIdAndEmailId(userId: Int!, emailId: Int!): UsersEmail

  """Reads a single \`Email\` using its globally unique \`ID\`."""
  email(
    """The globally unique \`ID\` to be used in selecting a single \`Email\`."""
    nodeId: ID!
  ): Email

  """Reads a single \`User\` using its globally unique \`ID\`."""
  user(
    """The globally unique \`ID\` to be used in selecting a single \`User\`."""
    nodeId: ID!
  ): User

  """Reads a single \`UsersEmail\` using its globally unique \`ID\`."""
  usersEmail(
    """
    The globally unique \`ID\` to be used in selecting a single \`UsersEmail\`.
    """
    nodeId: ID!
  ): UsersEmail

  """Reads a set of \`Forum\`."""
  allForumsList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Forum\`."""
    orderBy: [ForumsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForumCondition
  ): [Forum!]

  """Reads a set of \`Post\`."""
  allPostsList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`Post\`."""
    orderBy: [PostsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): [Post!]
  forumById(id: Int!): Forum
  postById(id: Int!): Post

  """Reads a single \`Forum\` using its globally unique \`ID\`."""
  forum(
    """The globally unique \`ID\` to be used in selecting a single \`Forum\`."""
    nodeId: ID!
  ): Forum

  """Reads a single \`Post\` using its globally unique \`ID\`."""
  post(
    """The globally unique \`ID\` to be used in selecting a single \`Post\`."""
    nodeId: ID!
  ): Post
  empty: ID
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  firstName: String!
  lastName: String!

  """Reads and enables pagination through a set of \`UsersEmail\`."""
  usersEmailsByUserIdList(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Skip the first \`n\` values."""
    offset: Int

    """The method to use when ordering \`UsersEmail\`."""
    orderBy: [UsersEmailsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersEmailCondition
  ): [UsersEmail!]!
  fullName: String!
}

"""
A condition to be used against \`User\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`firstName\` field."""
  firstName: String

  """Checks for equality with the object’s \`lastName\` field."""
  lastName: String
}

type UsersEmail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: Int!
  emailId: Int!

  """Reads a single \`User\` that is related to this \`UsersEmail\`."""
  userByUserId: User

  """Reads a single \`Email\` that is related to this \`UsersEmail\`."""
  emailByEmailId: Email
}

"""
A condition to be used against \`UsersEmail\` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UsersEmailCondition {
  """Checks for equality with the object’s \`userId\` field."""
  userId: Int

  """Checks for equality with the object’s \`emailId\` field."""
  emailId: Int
}

"""Methods to use when ordering \`UsersEmail\`."""
enum UsersEmailsOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  EMAIL_ID_ASC
  EMAIL_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering \`User\`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

`;
